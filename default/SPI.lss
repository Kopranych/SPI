
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000040  00000000  00000000  00000875  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000059  00000000  00000000  000008b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000219  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000170  00000000  00000000  00000b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  00000c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000101  00000000  00000000  00000fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000043  00000000  00000000  000010a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000061  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <spi_init_master>:



void spi_init_master()
{
	SPI_DDR |= 1<<SPI_SS|1<<SPI_MOSI|1<<SPI_SCK;
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	SPI_DDR &=~(1<<SPI_MISO);
  72:	be 98       	cbi	0x17, 6	; 23
	SPI_PORT&=~(1<<SPI_SS|1<<SPI_MOSI|1<<SPI_SCK|1<<SPI_MISO);
  74:	88 b3       	in	r24, 0x18	; 24
  76:	8f 70       	andi	r24, 0x0F	; 15
  78:	88 bb       	out	0x18, r24	; 24
	SPCR |=1<<SPE|1<<MSTR;//включаем SPI и режим Master
  7a:	8d b1       	in	r24, 0x0d	; 13
  7c:	80 65       	ori	r24, 0x50	; 80
  7e:	8d b9       	out	0x0d, r24	; 13
}
  80:	08 95       	ret

00000082 <spi_transive_master>:

int8_t spi_transive_master(int8_t data)
{
	SPDR = data;
  82:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR&(1<<SPIF)));
  84:	77 9b       	sbis	0x0e, 7	; 14
  86:	fe cf       	rjmp	.-4      	; 0x84 <spi_transive_master+0x2>
	SPI_PORT|= 1<<SPI_SS;
  88:	c4 9a       	sbi	0x18, 4	; 24
	SPI_PORT&= ~(1<<SPI_SS);
  8a:	c4 98       	cbi	0x18, 4	; 24
	return SPDR;
  8c:	8f b1       	in	r24, 0x0f	; 15
}
  8e:	08 95       	ret

00000090 <main>:
#include "SPI.h"
#include <avr/io.h>
#include <util/delay.h>

void main()
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
	spi_init_master();
  94:	0e 94 36 00 	call	0x6c	; 0x6c <spi_init_master>
	DDRD |= 1<<PB0;
  98:	88 9a       	sbi	0x11, 0	; 17
	PORTD = 0b11111111;
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	82 bb       	out	0x12, r24	; 18
	spi_transive_master(0);
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 41 00 	call	0x82	; 0x82 <spi_transive_master>
	while(1)
	{	
		for(int i = 0; i<256; i++)
  a4:	c0 e0       	ldi	r28, 0x00	; 0
  a6:	d0 e0       	ldi	r29, 0x00	; 0
		{
			spi_transive_master(i);
  a8:	8c 2f       	mov	r24, r28
  aa:	0e 94 41 00 	call	0x82	; 0x82 <spi_transive_master>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	8f e7       	ldi	r24, 0x7F	; 127
  b0:	98 e3       	ldi	r25, 0x38	; 56
  b2:	a1 e0       	ldi	r26, 0x01	; 1
  b4:	81 50       	subi	r24, 0x01	; 1
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	a0 40       	sbci	r26, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x24>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x2e>
  be:	00 00       	nop
	DDRD |= 1<<PB0;
	PORTD = 0b11111111;
	spi_transive_master(0);
	while(1)
	{	
		for(int i = 0; i<256; i++)
  c0:	21 96       	adiw	r28, 0x01	; 1
  c2:	cf 3f       	cpi	r28, 0xFF	; 255
  c4:	d1 05       	cpc	r29, r1
  c6:	09 f0       	breq	.+2      	; 0xca <main+0x3a>
  c8:	6c f7       	brge	.-38     	; 0xa4 <main+0x14>
  ca:	ee cf       	rjmp	.-36     	; 0xa8 <main+0x18>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
